/*

Stage 4 of development, the quad-copter will output the values of orientation, these values will be used later in development

	* The setup function has been further modified to initialize the mpu or accel / gyro chip
	* The while loop at the beginning of loop stops unnecessary processor wastage, until new data
	  is present it doesn't continue processing loop

*/

// The includes listed below, straight from the ArduPilot libraries
#include <AP_Common.h>
#include <AP_Math.h>
#include <AP_InertialSensor.h>
#include <AP_Param.h>
#include <AP_ADC.h>
#include <AP_Progmem.h>
#include <AP_HAL.h>
#include <AP_HAL_AVR.h>
#include <PID.h>

// Motors labelled, used to improve source readability  
#define FRONT_RIGHT_MOTOR 0
#define REAR_LEFT_MOTOR 1
#define FRONT_LEFT_MOTOR 2
#define REAR_RIGHT_MOTOR 3

const AP_HAL::HAL& hal = AP_HAL_AVR_APM2;  // Specific HAL lib

// MPU accel / gyro chip
AP_InertialSensor_MPU6000 mpu;

// Map function used to scale input min / max to specified min / max
long map(long x, long in_min, long in_max, long out_min, long out_max)
{
  return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
}

void setup() 
{ 
  hal.gpio->pinMode(40, GPIO_OUTPUT);  // Disabling barometer, not compatable with mpu without baro driver (Not implemented)
  hal.gpio->write(40, 1);

  mpu.init(AP_InertialSensor::COLD_START, AP_InertialSensor::RATE_100HZ, NULL); // Initialize accel / gyro sensor - 100Hz refresh rate

  hal.scheduler->suspend_timer_procs();  // Prevents collisions
  mpu.dmp_init();	// Enabling dmp
  mpu.push_gyro_offsets_to_dmp();  // Calibrate  
  hal.scheduler->resume_timer_procs();  // Resume processing
}

void loop()	// Main loop
{
  while (mpu.num_samples_available() == 0);

  uint16_t channels[8];  // Create an array for the channels, 16 bit
  
  hal.rcin->read(channels, 8);  // Reading RC channels
  
  uint16_t rc_input_roll, rc_input_pitch, rc_input_throttle, rc_input_yaw;   // Vars to store output from channels
  
  rc_input_roll = map(channels[0], 1114, 1911, -45, 45);
  rc_input_pitch = map(channels[1], 1114, 1911, -45, 45);
  rc_input_throttle = channels[2];
  rc_input_yaw = map(channels[3], 1114, 1911, -150, 150);
  
  mpu.update();	 // Get data from mpu for orientation
  
  float mpu_curr_roll, mpu_curr_pitch, mpu_curr_yaw;
  mpu.quaternion.to_euler(&mpu_curr_roll, &mpu_curr_pitch, &mpu_curr_yaw);
  
  // Convert values to degrees
  mpu_curr_roll = ToDeg(mpu_curr_roll);
  mpu_curr_pitch = ToDeg(mpu_curr_pitch);
  mpu_curr_yaw = ToDeg(mpu_curr_yaw);
  
  hal.console->printf_P(PSTR("Roll: %4.1f Pitch: %4.1f Yaw: %4.1f \n"), mpu_curr_roll, mpu_curr_pitch, mpu_curr_yaw);
}

AP_HAL_MAIN();  // Keep calling main loop
